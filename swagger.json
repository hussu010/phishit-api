{
  "swagger": "2.0",
  "info": {
    "title": "Phishit API",
    "description": "API documentation of Phishit (P.S: use HTTPS scheme if hosted on https).",
    "version": "1.0.0"
  },
  "host": "",
  "basePath": "/api/",
  "schemes": ["http", "https"],
  "securityDefinitions": {
    "jwt": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization"
    }
  },
  "paths": {
    "/health": {
      "get": {
        "tags": ["health"],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Health"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      }
    },
    "/auth/otp": {
      "post": {
        "tags": ["auth"],
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "Requesting OTP for login.",
            "schema": {
              "$ref": "#/definitions/RequestOtp"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OTP sent to the phoneNumber.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "503": {
            "description": "Error while sending OTP.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "429": {
            "description": "Too many requests.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      }
    },
    "/auth/jwt/create": {
      "post": {
        "tags": ["auth"],
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "create jwt from otp.",
            "schema": {
              "$ref": "#/definitions/CreateJWT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "accessToken and refreshToken created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "accessToken": {
                  "type": "string",
                  "example": "string"
                },
                "refreshToken": {
                  "type": "string",
                  "example": "string"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Invalid OTP.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "429": {
            "description": "Too many requests.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      }
    },
    "/auth/jwt/refresh": {
      "post": {
        "tags": ["auth"],
        "parameters": [
          {
            "name": "obj",
            "in": "body",
            "description": "refresh accessToken from refreshToken.",
            "schema": {
              "$ref": "#/definitions/RefreshJWT"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "accessToken created successfully.",
            "schema": {
              "type": "object",
              "properties": {
                "accessToken": {
                  "type": "string",
                  "example": "string"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Invalid JWT or token type.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": ["users"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User informaton.",
            "schema": {
              "$ref": "#/definitions/GetMeUser"
            }
          },
          "401": {
            "description": "Unautorized request.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      }
    },
    "/users/me/username": {
      "put": {
        "tags": ["users"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "update username",
            "schema": {
              "$ref": "#/definitions/UpdateUsername"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Adventure updated successfully.",
            "schema": {
              "$ref": "#/definitions/Adventure"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unautorized request.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "409": {
            "description": "Username already exists.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      }
    },
    "/profiles/": {
      "get": {
        "tags": ["profiles"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User profile successfully obtained.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "404": {
            "description": "User not found.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      },
      "put": {
        "tags": ["profiles"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "Adding new user.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User profile successfully updated.",
            "schema": {
              "$ref": "#/definitions/Profile"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "404": {
            "description": "User not found.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      }
    },
    "/upload-images": {
      "post": {
        "tags": ["upload-images"],
        "summary": "upload images to s3.",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "images",
            "in": "formData",
            "description": "Images to be uploaded",
            "required": true,
            "type": "file",
            "format": "binary"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "description": "https://example.s3.url.com"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "413": {
            "description": "Request Entity Too Large.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      }
    },
    "/adventures/": {
      "get": {
        "tags": ["adventures"],
        "summary": "Get all adventures.",
        "parameters": [],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/AdventureList"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      },
      "post": {
        "tags": ["adventures"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "create adventure.",
            "schema": {
              "$ref": "#/definitions/Adventure"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Adventure created successfully.",
            "schema": {
              "$ref": "#/definitions/Adventure"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unautorized request.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      }
    },
    "/adventures/{id}": {
      "get": {
        "tags": ["adventures"],
        "summary": "get adventure by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Adventure"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      },
      "put": {
        "tags": ["adventures"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "update adventure.",
            "schema": {
              "$ref": "#/definitions/Adventure"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Adventure updated successfully.",
            "schema": {
              "$ref": "#/definitions/Adventure"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unautorized request.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "404": {
            "description": "Adventure not found.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      },
      "delete": {
        "tags": ["adventures"],
        "summary": "delete adventure by id.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "204": {},
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unauthorized.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "404": {
            "description": "Property not found.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      }
    },
    "/guide-requests": {
      "get": {
        "tags": ["guide-requests"],
        "summary": "Get all guide requests.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/GuideRequestList"
            }
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      },
      "post": {
        "tags": ["guide-requests"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "create guide request.",
            "schema": {
              "$ref": "#/definitions/GuideRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Guide request created successfully.",
            "schema": {
              "$ref": "#/definitions/GuideRequest"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unautorized request.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        }
      },
      "put": {
        "tags": ["guide-requests"],
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "obj",
            "in": "body",
            "description": "update guide request.",
            "schema": {
              "$ref": "#/definitions/UpdateGuideRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Guide request updated successfully.",
            "schema": {
              "$ref": "#/definitions/GuideRequest"
            }
          },
          "400": {
            "description": "Bad request.",
            "schema": {
              "$ref": "#/definitions/BadRequestError"
            }
          },
          "401": {
            "description": "Unautorized request.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "403": {
            "description": "Forbidden.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "404": {
            "description": "Guide request not found.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/SingleMessage"
            }
          }
        },
        "security": [
          {
            "jwt": []
          }
        ]
      }
    }
  },
  "definitions": {
    "Health": {
      "type": "object",
      "properties": {
        "uptime": {
          "type": "string",
          "example": "string"
        },
        "message": {
          "type": "string",
          "example": "string"
        },
        "date": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "RequestOtp": {
      "type": "object",
      "properties": {
        "phoneNumber": {
          "type": "string",
          "example": "9800000000"
        }
      }
    },
    "CreateJWT": {
      "type": "object",
      "properties": {
        "method": {
          "type": "string",
          "enum": ["phone", "google"]
        },
        "phoneNumber": {
          "type": "string",
          "example": "9800000000"
        },
        "code": {
          "type": "string",
          "example": "123456"
        }
      }
    },
    "RefreshJWT": {
      "type": "object",
      "properties": {
        "refreshToken": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "Adventure": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "string"
        },
        "title": {
          "type": "string",
          "example": "string"
        },
        "description": {
          "type": "string",
          "example": "string"
        },
        "location": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "example": "Point"
            },
            "coordinates": {
              "type": "array",
              "example": [85.324, 27.717]
            }
          }
        },
        "imageUrl": {
          "type": "string",
          "example": "string"
        },
        "imageAlt": {
          "type": "string",
          "example": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "63d1eef1fee2948db16b7842"
              },
              "url": {
                "type": "string",
                "example": "https://example.com/image.jpg"
              },
              "position": {
                "type": "number"
              }
            }
          }
        },
        "packages": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "63d1eef1fee2948db16b7842"
              },
              "title": {
                "type": "string",
                "example": "string"
              },
              "description": {
                "type": "string",
                "example": "string"
              },
              "price": {
                "type": "integer",
                "example": 12345
              },
              "duration": {
                "type": "integer",
                "example": 12
              }
            }
          }
        },
        "createdAt": {
          "type": "string",
          "example": "string"
        },
        "updatedAt": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "AdventureList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Adventure"
      }
    },
    "UpdateUsername": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "GuideRequest": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["INDIVIDUAL", "ORGANIZATION"]
        },
        "name": {
          "type": "string",
          "example": "Herald College"
        },
        "email": {
          "type": "string",
          "example": "college@email.com"
        },
        "phoneNumber": {
          "type": "string",
          "example": "9800000000"
        },
        "address": {
          "type": "string",
          "example": "macchapokhari ko side"
        },
        "message": {
          "type": "string",
          "example": "this is a message"
        },
        "documents": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "example": "63d1eef1fee2948db16b7842"
              },
              "url": {
                "type": "string",
                "example": "https://example.com/image.jpg"
              },
              "type": {
                "type": "string",
                "enum": [
                  "NID",
                  "PASSPORT",
                  "COMPANY_REGISTRATION_CERTIFICATE",
                  "OTHER"
                ]
              }
            }
          }
        },
        "createdAt": {
          "type": "string",
          "example": "string"
        },
        "updatedAt": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "GuideRequestList": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/GuideRequest"
      }
    },
    "UpdateGuideRequest": {
      "type": "object",
      "properties": {
        "type": {
          "status": "string",
          "enum": ["APPROVED", "REJECTED"]
        }
      }
    },
    "GetMeUser": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "string"
        },
        "phoneNumber": {
          "type": "string",
          "example": "string"
        },
        "googleId": {
          "type": "string",
          "example": "string"
        },
        "username": {
          "type": "string",
          "example": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string",
            "example": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "example": "string"
        },
        "updatedAt": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "Profile": {
      "type": "object",
      "properties": {
        "_id": {
          "type": "string",
          "example": "string"
        },
        "user": {
          "type": "string",
          "example": "objectID"
        },
        "fullName": {
          "type": "string",
          "example": "string"
        },
        "email": {
          "type": "string",
          "example": "email@gmail.com"
        },
        "gender": {
          "type": "string",
          "example": "MALE"
        },
        "dateOfBirth": {
          "type": "string",
          "example": "1969-12-25"
        },
        "bio": {
          "type": "string",
          "example": "beautiful bio of a good person"
        },
        "avatarUrl": {
          "type": "string",
          "example": "https://merodera-production.s3.ap-south-1.amazonaws.com/assets/default_user_avatar.png"
        },
        "createdAt": {
          "type": "string",
          "example": "string"
        },
        "updatedAt": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "SingleMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "example": "string"
        }
      }
    },
    "BadRequestError": {
      "type": "object",
      "properties": {
        "errors": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "msg": {
                "type": "string",
                "example": "string"
              },
              "path": {
                "type": "string",
                "example": "param"
              },
              "location": {
                "type": "string",
                "example": "body"
              }
            }
          }
        }
      }
    }
  },
  "security": [
    {
      "jwt": []
    }
  ]
}
